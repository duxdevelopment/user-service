service: user-service

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage}
  region: ap-southeast-2
  environment: ${self:custom.environment.currentSettings}

custom:
  defaultStage: dev
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    packager: 'yarn' # Packager that will be used to package your external modules
    excludeFiles: src/**/*.test.[t|j]s # Exclude test files
  amplify:
    - filename: src/aws-exports.js
      type: javascript
  # warmup:
  #   enabled: true
  #   events:
  #     - schedule: rate(5 minutes)
  #   prewarm: true
  #   concurrency: 1
  prune:
    automatic: true
    number: 5 # Number of versions to keep
  environment: ${file(config/variables.yml)}

functions:
  preSignUp:
    handler: src/handlers/preSignUp.default
  createTable:
    handler: src/schema/tableSchema.handler
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:CreateTable
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/*'
  getUserGroups:
    handler: src/handlers/getUserGroupForUser.default
    events:
      - http:
          path: fuck-you
          method: get
          cors: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/*'
  getFleetUsers:
    handler: src/handlers/fleets/getUsersInFleet.default
    events:
      - http:
          path: fleet-users
          method: get
          cors: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:Query
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/*'
  addUserToFleet:
    handler: src/handlers/fleets/addUserToFleet.default
    events:
      - http:
          path: add-user-to-fleet
          method: post
          cors: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/*'
  registerUser:
    handler: src/handlers/registerUser.default
    events:
      - http:
          path: register
          method: post
          cors: true
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:PutItem
          - dynamodb:Query
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/*'
  notifyUserPlateRecognition:
    handler: src/handlers/registerUser.default
    events:
      - sns: notify-user-plate-recognition-${self:provider.stage}
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:Query
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TABLE_PREFIX}*'
  getPaymentMethods:
    handler: src/handlers/getPaymentMethods.default
    events:
      - http:
          path: get-payment-methods
          method: get
          cors: true
          authorizer:
            arn: ${self:provider.environment.AUTH_ARN}
            identitySource: method.request.header.Authorization
            type: token
            resultTtlInSeconds: 1800
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/*'
  addPaymentMethod:
    handler: src/handlers/addPaymentMethod.default
    events:
      - http:
          path: add-payment-method
          method: post
          cors: true
          authorizer:
            arn: ${self:provider.environment.AUTH_ARN}
            identitySource: method.request.header.Authorization
            type: token
            resultTtlInSeconds: 1800
    iamRoleStatements:
      - Effect: 'Allow'
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
        Resource: 'arn:aws:dynamodb:${self:provider.region}:*:table/*'

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-plugin-warmup
  - serverless-dotenv-plugin
  - serverless-prune-plugin
  - serverless-iam-roles-per-function
